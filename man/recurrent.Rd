% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recurrent.R
\name{recurrent}
\alias{recurrent}
\title{Convert camera trap data into a recurrent event format}
\usage{
recurrent(df, Primary, Secondary, End_survey, survey_duration = 10)
}
\arguments{
\item{df}{A dataframe containing the site, the timestamp and the species information}

\item{Primary}{A pool of one or several species names considered to affect the secondary species}

\item{Secondary}{Name of the species affected by the primary (only one name allowed).}

\item{End_survey}{Date of study end (e.g. "01-01-2001")}

\item{survey_duration}{Maximum duration of the survey (in days, e.g. "7")}
}
\value{
A dataframe containing:
\describe{
\item{Site}{Camera-trap site ID}
\item{ID}{Survey ID}
\item{Primary}{Primary species starting the survey}
\item{DateTime_Primary}{Timestamp of the start of the survey (i.e. of the primary species observation)}
\item{DateTime}{Timestamp of the recurrent event (i.e. of the secondary species observation)}
\item{t.start}{Time since the start of the survey}
\item{t.stop}{Time since the last event, which can be the primary species or a previous secondary species}
\item{event}{Binary, 1 = recurrent event, 0 = censoring event}
\item{enum}{Event number within the survey}
\item{Event_type}{Either the recurrent event, giving the name of the secondary species, or a censoring event and the reason of censoring}
\item{DateTime_Primary}{Timestamp of survey start (primary observation)}
\item{...}{Any covariate attached to the dataset}
}
}
\description{
Takes a camera trap dataset as input (site ID, timestamp and species name) and return a recurrent event dataset.
The function creates a survey after each observation of the primary species for a defined maximum duration.
Within each survey, all the observations of the secondary species are converted into recurrent events.
The returned dataframe can be directly used for recurrent event analysis.
}
\examples{
\dontrun{
library(dplyr)
library(pammtools)
library(ggplot2)

####
# Data Formating
####

# See data's vignette for details
head(Murphy2021_ct_data)

# Define the pool of primary species (affecting secondary species, stopping the survey if observed)
Primary = c("Fawn", "Deer", "Bear", "Bobcat", "Human", "Motorized")

# Define the secondary species (affected bby the primary species, only one)
Secondary = c("Coyote")

# Define the end of study
End_survey = max(Murphy2021_ct_data$DateTime)

# Convert into recurrent event
recu = recurrent(Murphy2021_ct_data, Primary, Secondary, End_survey, survey_duration = 7)

# Select only one primary species for recurrent event analysis
recu_deer = recu \%>\% filter(Primary == "Deer")

# PED transformation
ped = recu_deer \%>\%
    as_ped(formula = Surv(t.start, t.stop, event)~ matrix,
           id = "Id",
           transition = "enum",
           timescale = "calendar")

####
# PAMM
####

# Null model
m_null = pamm(formula = ped_status ~
    s(tend) +
    s(Id, bs = "re"),
    data = ped,
    offset = offset,  engine = "bam", method = "fREML",  discrete = TRUE)
summary(m_null)

# CPH-like model
m_linear = pamm(formula = ped_status ~
    matrix +
    s(tend) +
    s(Id, bs = "re"),
    data = ped,
    offset = offset,  engine = "bam", method = "fREML",  discrete = TRUE)
summary(m_linear)

# Time-varying covariate effect
m_tv = pamm(formula = ped_status ~
    s(tend, bs = "cr") +
    s(tend, by = as.ordered(matrix), bs = "cr") +
    s(Id, bs = "re"),
    data = ped,
    offset = offset,  engine = "bam", method = "fREML",  discrete = TRUE)
summary(m_tv)

#####
# Prediction plots
#####

# Null model
ndf_null <- ped \%>\%
   make_newdata(tend = unique(tend)) \%>\%
   add_hazard(m_null, exclude = c("s(id)"))
p_null = ggplot(ndf_null, aes(x = tend, y = hazard)) +
  geom_line() +
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = .3) +
  xlab("Time after white-tailed deer (day)") +
  ylab(~paste("Coyote event number.Day"^-1,".Camera-Trap"^-1))
print(p_null)

# Time-varying covariate effect
ndf_tv <- ped \%>\%
   make_newdata(tend = unique(tend), matrix = unique(matrix)) \%>\%
   add_hazard(m_tv, exclude = c("s(id)"))#'
p_tv = ggplot(ndf_tv, aes(x = tend, y = hazard, colour = matrix)) +
  geom_line() +
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = .3) +
  scale_color_manual(values = c("#999999", "#E69F00"))  +
  xlab("Time after white-tailed deer (day)") +
  ylab(~paste("Coyote event number.Day"^-1,".Camera-Trap"^-1))
print(p_tv)

}

}
